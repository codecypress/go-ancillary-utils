/*package main

import (
	"fmt"
	cErrors "github.com/pkg/errors"
	"github.com/sirupsen/logrus"
	"net/url"
	"reflect"
	"codecypress.com/ancillary-utils/utils/exceptions"
	"codecypress.com/ancillary-utils/utils/fileUtils"
	"codecypress.com/ancillary-utils/utils/logging"
	"unsafe"
)

type QBuilder struct {
	list []string
}

func (builder *QBuilder) GetList() []string {
	return builder.list
}
func (builder *QBuilder) GetList2() *[]string {
	return &builder.list
}

func main() {
	logrus.SetFormatter(logging.GetCustomFormatter())
	//connectionManager.SetupDSNs()

	encodedValue, err := fileUtils.ReadFromFile("C:\\Users\\vinrithi\\Documents\\Programming\\GOLANG\\ke/co/skyworld/ancillary-utils\\test.txt")
	if err != nil {
		exceptions.ThrowException(cErrors.Cause(err))
		return
	}
	decodedValue, err := url.QueryUnescape(encodedValue)
	if err != nil {
		exceptions.ThrowException(cErrors.Cause(err))
		return
	}
	fmt.Println(decodedValue)

}

func GetUnexportedField(field reflect.Value) interface{} {
	return reflect.NewAt(field.Type(), unsafe.Pointer(field.UnsafeAddr())).Elem().Interface()
}

func SetUnexportedField(field reflect.Value, value interface{}) {
	reflect.NewAt(field.Type(), unsafe.Pointer(field.UnsafeAddr())).
		Elem().
		Set(reflect.ValueOf(value))
}*/